/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lagrangeinterpolation;

import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;

/**
 *
 * @author anter_000
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    //float[] x = {1,2,3,7};
    //float[] y = {3,-1,4,-3};
    float[] x = {1,2,3,7};
    float[] y = {1,2,3,7};

    float a = 4;
    String equation = "";
    public UI() {
        initComponents();
        String currEquation = getEquation(a,x,y);
        equation = currEquation;
        System.out.println(currEquation);
        System.out.println("f(4): " + getY(a,currEquation));
        BufferedImage invertedGraph = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        int width = invertedGraph.getWidth();
        int height = invertedGraph.getHeight();
        
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                invertedGraph.setRGB(j, i, Color.white.getRGB());
            }
        }
        
        for(float a = 0; a < width; a += 1){
            float y = getY(a,equation);
            if(y < height && y >= 0){
                System.out.println("(" + a + "," + (int)y + ")");
                invertedGraph.setRGB((int)a, (int)y, Color.black.getRGB());
            }
        }
        
        BufferedImage graph = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
        
        int i = 0;
        int k = height-1;
        for(; i < height && k >= 0; i++, k--){
            for(int j = 0; j < width; j++){
                graph.setRGB(j, k, invertedGraph.getRGB(j,i));
            }
        }
        graphPanel.setIcon(new ImageIcon(graph));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        graphPanel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UI().setVisible(true);
            }
        });
    }
    
    public String getEquation(float a, float[] x, float[] y){
        String equation = "";
        
        for(int i = 0; i < x.length; i++){
            for(int j = 0; j < x.length; j++){
                if(j != i){
                    equation += "(x-" + x[j] + ")/(" + (x[i]-x[j]) + ")*";
                }
            }
            equation += "(" + y[i] + ")";
            if(i < x.length-1){
                equation += "+";
            }
        }
        
        return equation;
        
    }
    
    public float getY(float x, String equation){
        
        float retVal = 0;
        String a = Float.toString(x);
        String[] lArray = equation.split("\\+");
        String currNumber = "";
        
        for(String l : lArray){
            l = l.replaceAll("x", a);
            System.out.println(l);
            int i = 1;
        
            float currL = 0;
            char currLOperator = '+';
            for(i = 0; i < l.length();){
                if(l.charAt(i) == '('){
                    i++;
                    while(l.charAt(i) != ')'){
                        currNumber += l.charAt(i);
                        i++;
                    }
                    //System.out.println(calculate(currNumber));
                    currL = calculate(currLOperator,currL,calculate(currNumber));
                    //System.out.println("currL: " + currL);
                    currNumber = "";
                    i++;
                }
                else{
                    if(i < l.length() && isOperator(l.charAt(i)+"")){
                        currLOperator = l.charAt(i);
                        i++;
                    }
                }
            }
            
            retVal += currL;
        }
        return retVal;
        
    }
    
    public float calculate(String string){
        
        float retVal = 0;
        float operand2 = 0;
        char operator = '+';
        String currNumber = "";
        
        int i = 0;
        while(i < string.length() && !isOperator(string.charAt(i)+"")){
            currNumber += string.charAt(i);
            i++;
        }
        if(i < string.length() && !currNumber.isEmpty()){
            retVal = Float.parseFloat(currNumber);
            currNumber = "";
        }
        if(i < string.length() && isOperator(string.charAt(i)+"")){
            operator = string.charAt(i);
            i++;
        }
        while(i < string.length()){
            currNumber += string.charAt(i);
            i++;
        }
        if(!currNumber.isEmpty()){
            operand2 = Float.parseFloat(currNumber);
        }
        
        return calculate(operator,retVal,operand2);
    
    }
    
    public float calculate(char operator, float operand1, float operand2){
        
        float retVal = operand1;
        
        switch(operator){
            case '+':
                retVal =+ operand2;
                break;
            case '-':
                retVal -= operand2;
                break;
            case '/':
                retVal /= operand2;
                break;
            case '*':
                retVal *= operand2;
                break;
        }
        
        return retVal;
        
    }
    
    public boolean isOperator(String string){
        return string.matches("\\+|\\-|\\*|\\/");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel graphPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
